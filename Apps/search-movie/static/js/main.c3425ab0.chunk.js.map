{"version":3,"sources":["Film/Search.js","Film/Pages.js","Film/Show.js","App.js","serviceWorker.js","index.js"],"names":["Search","onSendData","input","React","useState","searchValue","setSearch","value","onChange","event","target","useInputSearch","className","onSubmit","preventDefault","id","placeholder","type","Pages","count","title","number","isMin","numPages","countPages","Math","ceil","addPages","nextPage","i","push","unshift","NaN","onClick","bind","map","num","index","isNaN","key","ShowFilms","films","console","log","film","Poster","src","alt","Title","Year","App","setFilms","pages","setPages","error","setError","sendData","page","fetch","toString","then","response","json","Response","Error","results","totalResults","style","marginLeft","Show","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c3425ab0.chunk.js","sourcesContent":["import React from 'react'\nimport './Films.css'\n\nfunction useInputSearch() {\n    const [searchValue, setSearch] = React.useState('')\n    return {\n        value: searchValue,\n        onChange: event => setSearch(event.target.value)\n    }\n}\n\nfunction Search({onSendData}) {\n    const input = useInputSearch()\n\n    return (\n        <div className='search'>\n            <form onSubmit={event => {\n                    event.preventDefault()\n                    onSendData(input.value)\n                }}>\n                <div className=\"search-body\">\n                    <input id='inputSearch' {...input} className='search__input' placeholder='Enter the film'/>\n                    <button type='submit' className='search__button'></button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Search","import React from 'react'\nimport './Films.css'\n\nfunction Pages({count, title, onSendData, number}) {\n\n    const minPages = 5\n\n    let isMin = false\n    let numPages = []\n    let countPages = Math.ceil(count/10)\n    let addPages = countPages - number > minPages ? minPages : countPages\n    \n    let nextPage = number + 1\n    \n    let i = countPages - number > minPages ? number : countPages - minPages\n    if (i <= 0) {\n        i = 1\n        isMin = true\n    } \n    for(; (i < number + addPages) && i <= countPages; i++) numPages.push(i)\n    \n    if(number !== 1 && !isMin) {\n        numPages.unshift(NaN)\n        numPages.unshift(1)\n    }\n\n    if(number < countPages - minPages) {\n        if (!isMin) numPages.push(NaN)\n        numPages.push(countPages)\n    }\n\n    return (\n        <ul className=\"pages\">\n            {number <= 1 ? <li className=\"pages__unactive-arrow\">&lt;</li>  : <li className=\"pages__active-arrow\" onClick={onSendData.bind(null,title, numPages[2]-1)}>&lt;</li>}\n    \n            {\n                numPages.map((num,index) => {\n                    if(isNaN(num)) return <li key={index} className=\"dots\">...</li>\n                    if(num === number) return <li key={index} className=\"pages__active-page\">{num}</li>\n                    return <li key={index} onClick={onSendData.bind(null, title, num)} className=\"pages__element\">{num}</li>\n                })\n            }\n            \n            {number !== countPages ? <li className=\"pages__active-arrow\" onClick={onSendData.bind(null,title, nextPage)}>&gt;</li>: \n            <li className=\"pages__unactive-arrow\">&gt;</li>} \n        </ul>\n    )\n}\n\nexport default Pages","import React from 'react'\nimport './Films.css'\n\nfunction ShowFilms({films}) {\n    console.log(films)\n    return (\n        <ul className=\"films\">\n            {\n                films.map((film,index) => {\n                    return <li key={index} className=\"film\">\n                            {film.Poster !== 'N/A' ? \n                                <img className=\"film__poster\" src={film.Poster} alt=\"Poster film\"/> : \n                                <div className=\"film__no-poster\"><span className=\"film__no-poster__text\">no poster</span></div>\n                            }\n\n                            <div className=\"film__text\">\n                                <span>{film.Title}</span>\n                                <br/>\n                                <span>{film.Year}</span>\n                            </div>\n                        </li>\n                })\n            }\n        </ul>\n    )\n}\n\nexport default ShowFilms","import React from 'react'\nimport Search from './Film/Search'\nimport Pages from './Film/Pages'\nimport Show   from './Film/Show'\n\nfunction App() {\n  const [films, setFilms] = React.useState([])\n  const [pages, setPages] = React.useState({})\n  const [error, setError] = React.useState({})\n\n  function sendData(title, page=1) {\n    fetch(`https://www.omdbapi.com/?s=${title}&page=${page.toString()}&apikey=c9197d74`)\n        .then(response => {\n          return response.json()\n        })\n        .then(json => {\n          setError({\n          Response: json.Response,\n          Error: json.Error\n        })\n          setFilms(json.Search)\n          setPages({\n            results: json.totalResults,\n            title: title,\n            number: page\n          })\n        })\n  }\n\n  return (\n    <div>\n      <Search onSendData={sendData} countPages={pages}/>\n      {error.Response === \"False\" &&  <h1 style={{marginLeft: '1em'}} > {error.Error}</h1>}     \n      {pages.results && <Pages count={pages.results} title={pages.title} number={pages.number} onSendData={sendData}/>}\n      {films && <Show films={films} />}\n      \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}