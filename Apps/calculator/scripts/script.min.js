"use strict";function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_unsupportedIterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(a,r){if(a){if("string"==typeof a)return _arrayLikeToArray(a,r);var t=Object.prototype.toString.call(a).slice(8,-1);return"Object"===t&&a.constructor&&(t=a.constructor.name),"Map"===t||"Set"===t?Array.from(t):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(a,r):void 0}}function _iterableToArray(a){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a))return _arrayLikeToArray(a)}function _arrayLikeToArray(a,r){(null==r||r>a.length)&&(r=a.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=a[t];return n}var buttons=document.getElementById("buttons"),result=document.getElementById("result-answer"),list=document.getElementById("history-list"),btnClear=document.getElementById("clearButton"),btnBack=document.getElementById("backButton"),addition=function(a,r){return a+r},substraction=function(a,r){return a-r},multiplication=function(a,r){return a*r},division=function(a,r){if(0!==r)return a/r;alert("Division by zero")};function showHistory(a){a+="="+arrayCalculation[0];var r=document.createElement("li"),t=document.createTextNode(a);r.append(t),list.append(r)}function calculateResult(){var a=arrayCalculation.filter((function(a){return""!==a&&null!==a}));function r(){var r,t=-1;return a.forEach((function(a,r){"("===a&&(t=r)})),r=a.indexOf(")",t),{begin:t,end:r}}function t(a){var r=a.indexOf("*"),t=a.indexOf("/"),n=a.indexOf("+"),e=a.indexOf("-");return-1!==r&&-1!==t&&r<t?r:-1!==r&&-1!==t&&t<r?t:-1!==r?r:-1!==t?t:-1!==n&&-1!==e&&n<e?n:-1!==n&&-1!==e&&e<n?e:-1!==n?n:-1!==e?e:null}function n(a,r){if(null!==r){var t,n=a.slice(r-1,r+2);try{t=function(a){var r,t=+a[0],n=a[1],e=+a[2];switch(n){case"+":r=addition(t,e);break;case"-":r=substraction(t,e);break;case"*":r=multiplication(t,e);break;case"/":r=division(t,e);break;default:console.log("Неизвенствый операнд",n)}return r.toString()}(n)}catch(a){return!1}return a.splice(r-1,3,t),a}console.log(a)}for(var e=!1;1!==a.length&&!0!==e;){var l=r();if(-1!==l.begin&&-1!==l.end){var i=Math.abs(l.begin-l.end)<=2?a.slice(l.begin+1,l.end):a.slice(l.begin,l.end+1);if(1!==i.length){var o,u=n(i,t(i));!1!==u?(o=a).splice.apply(o,[l.begin,Math.abs(l.begin-l.end-1)].concat(_toConsumableArray(u))):e=!0}else a.splice(l.begin,1),a.splice(l.end-1,1)}else{var c=t(a),s=n(a,c);!1!==s?a=s:e=!0}}(arrayCalculation=[])[0]=a}var arrayCalculation=[];function calculation(a){var r=a.target.textContent,t=arrayCalculation.length-1>=0?arrayCalculation.length-1:0,n=""===arrayCalculation[t]?arrayCalculation[t-1]:arrayCalculation[t];function e(){arrayCalculation[t]+=r}function l(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r;arrayCalculation.push(a),arrayCalculation.push("")}switch(void 0===n&&(n=""),r){case".":""===arrayCalculation[t]&&(r="0."),arrayCalculation[t].includes(".")||e();break;case"=":calculateResult(),showHistory(result.innerText);break;case"()":var i=arrayCalculation.filter((function(a){return"("===a})).length,o=arrayCalculation.filter((function(a){return")"===a})).length;"("===r&&i++,")"===r&&o++,")"===n&&o===i?(arrayCalculation.push("*"),r="("):n.match(/[0-9]/)&&i>o||")"===n?r=")":n.match(/[0-9]/)?(arrayCalculation.push("*"),r="("):r="(",l();break;case"+/-":var u=arrayCalculation[t];(u.match(/[0-9]/)||{}).input&&(u=-u,arrayCalculation[t]=u.toString());break;case(r.match(/[\+\-\/\*]/)||{}).input:if(t>0){var c=(n.match(/[\+\-\/\*]$/)||{}).input;c?arrayCalculation[t-1]=r:c||0===t||"("===n||l()}else l();break;case(r.match(/[0-9]/)||{}).input:")"===n&&(arrayCalculation[t]="*",t++,arrayCalculation.push("")),e();break;default:console.log("Неожиданный символ",r)}result.innerText=arrayCalculation.join("")}function clear(){(arrayCalculation=[])[0]="",result.innerText="",document.querySelectorAll("li").forEach((function(a){return list.removeChild(a)}))}function back(){var a=arrayCalculation[arrayCalculation.length-1].split("");1===a.length?arrayCalculation.pop():a.length>1&&(arrayCalculation.pop(),a.pop(),arrayCalculation.push(a.join(""))),result.innerText=arrayCalculation.join("")}arrayCalculation[0]="",buttons.addEventListener("mousedown",calculation),btnClear.addEventListener("mousedown",clear),btnBack.addEventListener("mousedown",back);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
